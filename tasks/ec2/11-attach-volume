## attach-volume
#
# Attach the EBS volume, and partition if necessary.

declare -i attempt=24

# Get a random device letter, we will hang forever if we try
# to attach a volume to an already mapped device.
for device_letter in {f..z}
do
    block_device_path="/dev/xvd${device_letter}"
    if [ ! -b "${block_device_path}" ]
    then
        break
    fi
done

# Nitro hypervisors use NVMe EBS volumes. Check if our instance is
# using that.
#
# Note: we still use device_letter (set in the above loop) later for
# the aws ec2 attach-volume command.
if is_nitro
then
    # As above, but for /dev/nvme... block device types. Such devices
    # always start from 0, which is already known to be in use for
    # root from the above if condition.
    for device_number in {1..21}
    do
        block_device_path="/dev/nvme${device_number}n1"
        if [ ! -b "${block_device_path}" ]
        then
            break
        fi
    done
fi

if [ -b "${block_device_path}" ]
then
    die "No free device letters found!"
fi

# Wait until the volume has a status of 'available' before attempting
# to attach to ensure success.
while [ ${attempt} -ne 0 -a "$(aws --output json \
    ec2 describe-volumes \
    --volume-ids "${volume_id}" | \
    jq -e -r '.Volumes[0].State')" != "available" ]
do
    sleep 5
    (( --attempt ))
done

if [ ${attempt} -eq 0 ]
then
    die "It seems we were unable to create ${volume_id}."
fi

# attach-volume doesn't recognise /dev/nvme.* as a valid device name.
aws ec2 attach-volume --volume-id "${volume_id}" \
    --instance-id "${instance_id}" \
    --device "/dev/xvd${device_letter}" >/dev/null

# Wait until the volume is attached
dotdot "test -b ${block_device_path} && echo attached"

# Partition the block device.
if [ "${partitioning}" != "none" ]
then
    parted -s "${block_device_path}" mktable "${partitioning}"
    parted -s -a optimal "${block_device_path}" mkpart primary ext4 1Mi 100%
    parted -s "${block_device_path}" set 1 boot on
    hdparm -z "${block_device_path}"
    if ! is_nitro
    then
        fs_device_path="${block_device_path}1"
    else
        fs_device_path="${block_device_path}p1"
    fi
else
    fs_device_path="${block_device_path}"
fi
