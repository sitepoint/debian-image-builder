## grub
#
# Configure ${imagedir}/boot/grub/menu.lst or
# ${imagedir}/etc/default/grub and (if applicable) also run
# grub-install.

if [ "${virt}" = 'paravirtual' ]
then
    # pv-grub-menu (which provides update-menu-lst) needs /dev,
    # /dev/pts and /proc to already be mounted to execute correctly
    # (which is why it cannot be added to packages for normal
    # installation as part of the debootstrap process. This was taken
    # care of in 15-mount-specials.
    chroot_cmd "${imagedir}" apt-get -y --install-recommends \
        -o DPkg::Options::=--force-confnew \
        -o DPkg::Options::=--force-confdef \
        install pv-grub-menu

    # Disable the count-down.
    sed -i 's/^\(timeout\)\s\+.*$/\1\t\t0/' \
        "${imagedir}/boot/grub/menu.lst"

    # Hide the interactive prompt.
    if ! grep -q hiddenmenu "${imagedir}/boot/grub/menu.lst"
    then
        sed -i 's/^\(timeout.*$\)/\1\n\n## Hide the interactive prompt\nhiddenmenu/' \
            "${imagedir}/boot/grub/menu.lst"
    fi

    # Set the groot value.
    if [ "${partitioning}" = 'none' ]
    then
        sed -i 's/^\(#\s\+groot\)=.*$/\1=(hd0)/' \
            "${imagedir}/boot/grub/menu.lst"
    else
        sed -i 's/^\(#\s\+groot\)=.*$/\1=(hd0,0)/' \
            "${imagedir}/boot/grub/menu.lst"
    fi

    # Paravirtual instances using instance-backed storage don't appear
    # to support partitions.
    if [ "${volume_type}" = 'instance' ]
    then
        sed -i 's/^\(#\s\+kopt=.*\)root=[^[:space:]]*\(.*\)$/\1root=\/dev\/xvda1\2/' \
            "${imagedir}/boot/grub/menu.lst"
    fi

    # Disable recovery options - we won't be able to select them
    # anyway.
    sed -i 's/^\(#\s\+alternative\)=.*$/\1=false/' \
        "${imagedir}/boot/grub/menu.lst"

    # Disable the memtest86 boot option.
    sed -i 's/^\(#\s\+memtest86\)=.*$/\1=false/' \
        "${imagedir}/boot/grub/menu.lst"

    # Regenerate menu.lst.
    chroot_cmd "${imagedir}" update-menu-lst
    rm -f "${imagedir}/boot/grub/menu.lst~"
else
    # Disable the count-down.
    sed -i "s/^\(GRUB_TIMEOUT\)=.*$/\1=0/" "${imagedir}/etc/default/grub"

    # Disable recovery options - we won't be able to select them anyway.
    sed -i "s/^#\(GRUB_DISABLE_RECOVERY\)=.*$/\1=\"true\"/" \
        "${imagedir}/etc/default/grub"

    # Simplify grub.cfg to improve compatibility.
    echo -e '\nGRUB_DISABLE_OS_PROBER=true\nGRUB_DISABLE_SUBMENU=y' \
         >> "${imagedir}/etc/default/grub"

    # Hide kernel info but show systemd status.
    sed -i "s/^\(GRUB_CMDLINE_LINUX_DEFAULT\)=.*$/\1=\"quiet systemd.show_status=1\"/" \
        "${imagedir}/etc/default/grub"

    # Set kernel output console to serial.
    sed -i "s/^\(GRUB_CMDLINE_LINUX\)=.*$/\1=\"console=tty0 console=ttyS0,115200n8\"/" \
        "${imagedir}/etc/default/grub"

    # Have GRUB output to serial.
    sed -i 's/^#\?\(GRUB_TERMINAL\)=.*$/\1=\"console serial\"/' \
        "${imagedir}/etc/default/grub"
    echo -e 'GRUB_SERIAL_COMMAND="serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1"' \
         >> "${imagedir}/etc/default/grub"

    # Update grub.cfg using the update-grub script which applies the
    # above settings in etc/default/grub.
    chroot_cmd "${imagedir}" update-grub

    # Install GRUB to the start of the block device.
    if is_host_running_systemd && command -v systemd-nspawn 1>/dev/null
    then
        # If using systemd we can use /dev/xvda, which accurately
        # reflects the device name that the AMI will use to access the
        # block when booting.
        chroot_cmd "${imagedir}" grub-install --no-floppy --force \
                   /dev/xvda
    else
        # Running grub-install against /dev/xvdf, etc. shouldn't make
        # any difference, but this is untested. Patches welcome.
        chroot_cmd "${imagedir}" grub-install --no-floppy --force \
                   "${block_device_path}"
    fi

    # Sanity check values in grub.cfg
    if [ "${block_device_path:0:7}" = "/dev/sd" ]
    then
        sed -i "s#${block_device_path}#/dev/sda#g" \
            "${imagedir}/boot/grub/grub.cfg"
    elif [ "${block_device_path:0:8}" = "/dev/xvd" ]
    then
        sed -i "s#${block_device_path}#/dev/xvda#g" \
            "${imagedir}/boot/grub/grub.cfg"
    fi
fi
