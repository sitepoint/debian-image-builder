# Make required cloud-init configuration changes.

new_cloud_init_cfg="$(mktemp /tmp/cloud-XXXXXXXX.cfg)"

cat << EOF | python > "${new_cloud_init_cfg}"
#!/usr/bin/env python

from __future__ import print_function

import copy
import sys

try:
    import yaml
except ImportError:
    print("Error loading YAML library.", file=sys.stderr)
    sys.exit(1)

f = open('${imagedir}/etc/cloud/cloud.cfg')
orig_contents = yaml.safe_load(f.read())
f.close()
new_contents = copy.deepcopy(orig_contents)

# Don't create any new user accounts.
if 'users' in new_contents:
    new_contents['users'] = ['root']

# By default, cloud.cfg disables the root user account. That's not
# necessarily useful (or even desirable) when the image is to be used
# with a configuration management system.
if 'disable_root' in new_contents:
    new_contents['disable_root'] = False

if 'cloud_config_modules' in new_contents:
    new_contents['cloud_config_modules'] = [
        x for x in new_contents['cloud_config_modules'] if x not in [
            'byobu', 'chef', 'disable-ec2-metadata', 'emit_upstart',
            'fan', 'grub-dpkg', 'landscape', 'mcollective', 'puppet',
            'salt-minion'
        ]
    ]

# RightScale is a proprietary SaaS web platform.
if 'cloud_final_modules' in new_contents:
    new_contents['cloud_final_modules'] = [
        x for x in orig_contents['cloud_final_modules'] if x not in [
            'rightscale_userdata'
        ]
    ]

# Again, don't create any new user accounts.
if 'system_info' in new_contents:
    new_contents['system_info'] = {
        x: orig_contents['system_info'][x]
            for x in orig_contents['system_info']
                if x not in ['default_user']
    }

# Debian images don't have upstart by default.
if 'paths' in new_contents['system_info']:
    new_contents['system_info']['paths'] = {
        x: orig_contents['system_info']['paths'][x]
            for x in orig_contents['system_info']['paths']
                if x not in ['upstart_dir']
    }

# Keep the indentation more or less the same as the default cloud.cfg
# file.
class CloudInitDumper(yaml.Dumper):
    def increase_indent(self, flow=False, indentless=False):
        return super(CloudInitDumper, self).increase_indent(flow, False)

print(yaml.dump(new_contents, Dumper=CloudInitDumper,
                default_flow_style=False))
EOF

# Clobber the existing file (which should keep the original
# permissions intact).
cp "${new_cloud_init_cfg}" "${imagedir}/etc/cloud/cloud.cfg"
rm -f "${new_cloud_init_cfg}"
unset update_cloud_init_script

# Enable EC2 and Failsafe datasources. Enabling anything else will introduce
# unnecessary delays.
cat > "${imagedir}/etc/cloud/cloud.cfg.d/90_dpkg.cfg" <<EOF
# to update this file, run dpkg-reconfigure cloud-init
datasource_list: [ Ec2, None ]
EOF

# Avoid errors auto-mounting available EBS volumes due to unsupported
# 'nobootwait' mount option. See
# https://bugs.launchpad.net/cloud-init/+bug/785542

cat > "${imagedir}/etc/cloud/cloud.cfg.d/80_mounts.cfg" <<EOF
mount_default_fields: [~, ~, 'auto', 'defaults,nofail', '0', '2']
EOF
