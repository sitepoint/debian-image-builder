#!/bin/bash

# Define some colors
txtdef="\e[0m"    # revert to default color
bldred="\e[1;31m" # bold red
txtblu="\e[0;34m" # blue
txtbld="\e[1m"    # bold
txtund="\e[4m"    # underline

logfile=''
logcolor=${txtblu}
errfile=''
errcolor=${bldred}


## Trap management

# Get the commands associated with a specific signal.
function get_current_trap()
{
    local -r trap="${1-EXIT}"

    # It does not seem possible to print commands set for ERR
    if [ "${trap}" != "ERR" ]
    then
        trap -p ${trap} | sed "s/trap -- '\(.*\)' ${trap}.*/\1/"
    fi
}

# Add a command to one or more signals.
function add_to_trap()
{
    local -r add_command="${1}"
    shift
    local -r traps="${@-EXIT}"
    for trap in ${traps}
    do
        trap "${add_command};$(get_current_trap ${trap})" ${trap}
    done
}

# Remove commands from one or more signals.
function rm_from_trap()
{
    local -r remove_command="${1}"
    shift
    local -r traps="${@-EXIT}"
    for trap in ${traps}
    do
        trap "$(trap -p ${trap} | sed \
            "s/trap -- '\(.*\)' ${trap}/\1/;s/${remove_command};//")" ${trap}
    done
}


## Output, errors and logging

# Custom die function, output to stderr instead of stdout, each arg is a line
function die
{
    for line in "$@"
    do
        out "${errcolor}${line}${txtdef}\n" "${line}\n" ${errfile} >&2
    done
    exit 1
}

# Logging function without coloring
function logplain
{
    for line in "$@"
    do
        out "${line}\n" "${line}\n" ${logfile}
    done
}

# Logging function, each arg is a line
function log
{
    for line in "$@"
    do
        out "${logcolor}${line}${txtdef}\n" "${line}\n" ${logfile}
    done
}

# Log without the newline
function logn
{
    out "${logcolor}${1}${txtdef}" "${1}" ${logfile}
}

# Output function, takes $msg, $filemsg and $file args in that order
function out
{
    printf -- "${1}"
    if [ -n "${3}" ]
    then
        printf -- "${2}" >>${3}
    fi
}

# Wait for the execution of $cmd not to return an empty string
function dotdot
{
    local cmd=${1}
    local status=$(eval ${cmd})
    local sleep=5
    [ ! -z "$2" ] && sleep=${2}
    while [ -z "$status" ]
    do
        logn '.'
        sleep ${sleep}
        # Don't error out if the command fails.
        status=$(eval ${cmd} || true)
    done
    logn "\n"
}


## Task management

function insert_task_before
{
    if [ ! -e ${2} ]
    then
        die "Unable to add task $(basename ${2}) to the tasklist." \
            "${2} does not exist."
    fi
    if ! $(contains_basename $1 tasks[@])
    then
        die "Unable to add $(basename ${2}) to the tasklist." \
            "Task ${1} does not exist."
    fi
    local i=0
    for task in ${tasks[*]}
    do
        if [ $(basename ${task}) == "${1}" ]
        then
            log "Adding task $(basename ${2}) before task $(basename ${task})"
            tasks[${i}]=${2}
            i=$[i+1]
        fi
        tasks[${i}]=${task}
        i=$[i+1]
    done
}

function insert_task_after
{
    if [ ! -e ${2} ]
    then
        die "Unable to add task $(basename ${2}) to the tasklist." \
            "${2} does not exist."
    fi
    if ! $(contains_basename ${1} tasks[@])
    then
        die "Unable to add $(basename ${2}) to the tasklist." \
            "Task ${1} does not exist."
    fi
    local i=0
    for task in ${tasks[*]}
    do
        tasks[$i]=${task}
        i=$[i+1]
        if [ $(basename ${task}) == "${1}" ]
        then
            log "Adding task $(basename ${2}) after task $(basename ${task})"
            tasks[${i}]=${2}
            i=$[i+1]
        fi
    done
}

function remove_task
{
    if ! $(contains_basename ${1} tasks[@])
    then
        die "Unable to remove $1 from the tasklist." \
            "The task does not exist."
    fi
    local i=0
    for task in ${tasks[*]}
    do
        if [ $(basename ${task}) == "${1}" ]
        then
            log "Removing task ${1}"
        else
            tasks[$i]=${task}
            i=$[i+1]
        fi
    done
    unset tasks[${#tasks[@]}-1]
}

function contains
{
    declare -a haystack=("${!2}")
    for needle in ${haystack[*]}
    do
        [ "${needle}" == "${1}" ] && exit 0
    done
    exit 1
}

function contains_basename
{
    declare -a haystack=("${!2}")
    for needle in ${haystack[*]}
    do
        [ "$(basename ${needle})" == "${1}" ] && exit 0
    done
    exit 1
}

function get_command_name
{
    declare command

    for value in ${BASH_SOURCE[@]}
    do
        value_basename="$(basename ${value})"
        if [ "${value_basename}" != "utils" ]
        then
            command="${value_basename} ${command}"
        fi
    done

    echo ${command}
}

# https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances
function is_nitro
{
    if mount | grep -q '^\/dev\/nvme0n1p[0-9]\ on\ \/\ type\ '
    then
        return 0
    fi
    return 1
}

function chroot_cmd
{
    local -r bind_args="$(
        for i in ${block_device_path%1}*
        do
            echo -n \
                "--bind=${i} " \
                "--bind=${i}:$(echo ${i} | \
                    sed -e 's/\/dev\/xvd[a-z]/\/dev\/xvda/g' \
                        -e 's/\/dev\/nvme[0-9]n1p\([0-9]\+\)/\/dev\/xvda\1/g' \
                        -e 's/\/dev\/nvme[0-9]n1/\/dev\/xvda/g') "
        done
    )"

    if command -v systemd-nspawn 1>/dev/null
    then
        systemd-nspawn -M ${$} --bind=/dev/disk ${bind_args} -D "${@}"
    else
        # The following is expected to work but is untested.
        mount "${1}/proc" -t proc -o nosuid,noexec,nodev &&
            mount -t sysfs -o nosuid,noexec,nodev,ro sys "${1}/sys" &&
            mount -t devtmpfs -o mode=0755,nosuid udev "${1}/dev" &&
            mount -t devpts -o mode=0620,gid=5,nosuid,noexec devpts "${1}/dev/pts" &&
            mount -t tmpfs -o mode=1777,nosuid,nodev shm "${1}/dev/shm" &&
            mount -t tmpfs -o nosuid,nodev,mode=0755 run "${1}/run" &&
            mount -t tmpfs -o mode=1777,strictatime,nodev,nosuid tmp "${1}/tmp"
        chroot "${@}"
        umount "${1}/tmp" "${1}/run" "${1}/dev/shm" \
               "${1}/dev/pts" "${1}/dev" "${1}/sys"
    fi
}

function is_host_running_systemd
{
    test "$(readlink /sbin/init)" = "/lib/systemd/systemd"
}
