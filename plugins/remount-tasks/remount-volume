# Mostly copied from the create-volume task
#
# Note that we need to reset ${fs_device_path} in addition to
# block_device_path since the ${block_device_path} value might have
# changed.

# Get a random device letter, we will hang forever if we try
# to attach a volume to an already mapped device.
for device_letter in {f..z}
do
    block_device_path="/dev/xvd${device_letter}"
    if [ ! -b "${block_device_path}" ]
    then
        break
    fi
done

# Nitro hypervisors use NVMe EBS volumes. Check if our instance is
# using that.
#
# Note: we still use device_letter (set in the above loop) later for
# the aws ec2 attach-volume command.
if ! is_nitro
then
    # As above, but for /dev/nvme... block device types. Such devices
    # always start from 0, which is already known to be in use for
    # root from the above if condition.
    for device_number in {1..21}
    do
        block_device_path="/dev/nvme${device_number}n1"
        if [ ! -b "${block_device_path}" ]
        then
            break
        fi
    done
fi

if [ -b "${block_device_path}" ]
then
    die "No free device letters found!"
fi

logn "Reattaching the bootstrapped volume"
aws ec2 attach-volume \
    --volume-id "${volume_id}" \
    --instance-id "${instance_id}" \
    --device "/dev/xv${device_letter}"

# Wait until the volume is attached
dotdot "test -b ${block_device_path} && echo attached"

# Set ${fs_device_path}
if [ "${fs_device_path:$((${#fs_device_path} - 1)):1}" = 1 ]
then
    if ! is_nitro
    then
        fs_device_path="${block_device_path}1"
    else
        fs_device_path="${block_device_path}p1"
    fi
else
    fs_device_path="${block_device_path}"
fi

# Recreate the imagedir, it was delete in the unmount task
log "Creating mount location ${imagedir}"
mkdir -p "${imagedir}"

mount "${fs_device_path}" "${imagedir}"
log "The volume has been mounted at ${imagedir}"

log "Run the following commands to unmount and remove the volume:"
logplain \
    "umount ${imagedir}" \
    "rm -rf ${imagedir}" \
    "aws ec2 detach-volume --volume-id ${volume_id}" \
    "aws ec2 delete-volume --volume-id ${volume_id}"
