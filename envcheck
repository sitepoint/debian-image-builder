#!/bin/bash

declare -i exit_status=0
declare -i essentials=0  # Print essentials in place message

# These variables work differently to normal expectations. If they
# equal 0, they are good to use.
declare -i instance_backed=2
declare -i python=1
declare -i grant_launch_permission=1
declare urllib3_ver

declare -r s3cfg="${HOME}/.s3cfg"
declare -r euca_ver=$(dpkg-query -W -f '${Version}\n' euca2ools 2>/dev/null)
declare -r putobject='/usr/lib/python2.7/dist-packages/euca2ools/commands/s3/putobject.py'


# Return 0 if the first argument is equal to the highest version.
function version_ge()
{
    test "$(printf '%s\n' "$@" | sort -rV | head -n 1)" = "$1"
}


for var in AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY \
    AWS_DEFAULT_REGION EC2_USER_ID S3_BUCKET \
    LAUNCH_ACCOUNTS EC2_PRIVATE_KEY EC2_CERT
do
    # Check variable is not empty.
    if [ -z "${!var}" ]
    then
        echo "  unset ${var}"
        # Some missing variables are acceptable.
        if ! [[ "${var}" =~ S3_BUCKET|LAUNCH_ACCOUNTS ]]
        then
            exit_status=1
        fi
    # Check certificate path points to a file, if applicable.
    elif [[ "${var}" =~ EC2_CERT|EC2_PRIVATE_KEY ]]
    then
        if [ ! -f "${!var}" ]
        then
            echo "missing ${var}=${!var}"
            exit_status=1
        else
            echo "   good ${var}=${!var}"
        fi
    # Checks against the variable passed.
    else
        echo "   good ${var}=${!var}"
        # Cross off a required variable for instance-backed AMIs.
        if [ "${var}" = 'S3_BUCKET' ]
        then
            instance_backed=$(( --instance_backed ))
        # Cross of the required variable for the optional
        # grant-launch-permission-tasks plugin.
        elif [[ "${var}" =~ LAUNCH_ACCOUNTS ]]
        then
            grant_launch_permission=$(( --grant_launch_permission ))
        fi
    fi
done

# AWS_CREDENTIAL_FILE should not be set unless it points to a valid file (which
# only contains AWSAccessKeyId and AWSSecretKey values that would normally be
# read from the above environment variables anyway, making the file redundant.
if [ -z "${AWS_CREDENTIAL_FILE}" ]
then
    echo "   good AWS_CREDENTIAL_FILE is unset"
elif [ ! -f "${AWS_CREDENTIAL_FILE}"  ]
then
    echo "  error AWS_CREDENTIAL_FILE=${AWS_CREDENTIAL_FILE} (unset this)"
else
    echo "     ok AWS_CREDENTIAL_FILE=${AWS_CREDENTIAL_FILE}"
fi

# Check for Python support.
if ! command -v python 1>/dev/null
then
    echo "python is not installed."
    python=$(( --python ))
fi

# Check for python-requests compatibility with euca2ools.
# ie. Was https://github.com/eucalyptus/euca2ools/pull/83 merged?
if [ -z "${euca_ver}" ]
then
    echo "euca2ools package is not installed."
elif ! version_ge ${euca_ver} 3.3.2
then
    # Old euca2ools version detected. Check if patched.
    if grep -q -F "self.headers['Content-Length'] = source.size" \
        "${putobject}"
    then
        echo "euca2ools requires patching"
    else
        instance_backed=$(( --instance_backed ))
    fi
else
    # The euca2ools version is sufficiently high.
    instance_backed=$(( --instance_backed ))
fi

echo
if [ "${exit_status}" -ne 0 ]
then
    echo "Environment not ready."
else
    if [ ${instance_backed} -ne 0 ]
    then
        echo "Instance-backed AMI creation is unavailable."
        essentials=1
    fi
    if [ ${grant_launch_permission} -ne 0 ]
    then
        echo "grant-launch-permission is unavailable."
        essentials=1
    fi
    if [ ${essentials} -eq 1 ]
    then
        echo -e "\nEssentials are in place."
    else
        echo "All systems green."
    fi
fi
exit ${exit_status}
