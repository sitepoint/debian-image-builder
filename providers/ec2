declare -i get_desc=${get_desc:0}

if [ "${get_desc}" -eq 1 ]
then
    echo "    $(basename ${BASH_SOURCE[0]}) Build a Amazon Machine Image"
    return
fi

function check_args()
{
    local var_name

    for var_name in ${@}
    do
        if [ -z "${!var_name}" ]
        then
            die "Variable \$${var_name} must be set!"
        fi
    done
}

function check_partitioning()
{
    local partitioning="${1}"
    local virt="${2}"
    local volume_type="${3}"

    # AFAICT, paravirtual instances using instance-backed storage is
    # not supported by the official AWS AKIs. All other
    # instance/storage-type combinations appear to work fine.
    if [ "${virt}" = "paravirtual" -a "${volume_type}" = "instance" ]
    then
        if [ "${partitioning}" != "none" ]
        then
            die "Paravirtual instances cannot be partitioned."
        fi
    fi

    if [[ ! "${partitioning}" =~ none|msdos|gpt ]]
    then
        die "Unknown partitioning type '${partitioning}'."
    fi
}

function rm_bucket_lock()
{
    if [ -f "${bucket_lock_file}" ]
    then
        sed -i "/^${S3_BUCKET}$/d" "${bucket_lock_file}"
    fi
}

# Ensure no other debian-image-builder process is already running with intent
# to use the same bucket.
function check_bucket_lock()
{
    local lock_request="${1}"

    if [ ! -f "${bucket_lock_file}" ]
    then
        > "${bucket_lock_file}"
    fi
    if grep -q "${lock_request}" "${bucket_lock_file}"
    then
        die "${S3_BUCKET} looks to already be in use."
    else
        add_to_trap rm_bucket_lock EXIT
        echo "${S3_BUCKET}" >> "${bucket_lock_file}"
    fi
}

function test_files()
{
    local file_name

    for file_name in ${@}
    do
        check_args "${file_name}"

        if [ ! -f "${!file_name}" ]
        then
            die "Could not find \$${file_name} file ${!file_name}!"
        fi
    done
}

# Source specified template files.
function import_template()
{
    local file_name="${1}"

    if [ ! -f "${file_name}" ]
    then
        die "Could not find template file '${file_name}'!"
    else
        . "${file_name}"
    fi
}

# AMI details
ami_id=
name_suffix="$(date +%Y%m%d%H%M)"
description=
snapshot_id=
volume_id=
volume_size='1'
volume_inodes=
volume_type='ebs'
apt_mirrors='http://http.debian.net/debian'

# EC2 known regions
known_regions=('us-east-1')
known_regions+=('us-west-1')
known_regions+=('us-west-2')
known_regions+=('eu-west-1')
known_regions+=('ap-southeast-1')
known_regions+=('ap-southeast-2')
known_regions+=('ap-northeast-1')
known_regions+=('sa-east-1')
known_regions+=('us-gov-west-1')

# EC2 host info
virt=paravirtual
partitioning=msdos
instance_id=
region=
availability_zone=

# Build-time info
debootstrap_dir='/target'
bucket_lock_file="${HOME}/.${prog_name}"

# List of options for this subcommand
help="$(get_command_name)
This subcommand creates an Amazon EC2 AMI.

${txtund}Bootstrapping${txtdef}
    --template FILE                      Template file including predefined options.
    --codename C [jessie]                Debian release codename to bootstrap (${txtbld}${codename}${txtdef})
    --virt VIRT [paravirtual|hvm]        Select virtualization type (${txtbld}${virt}${txtdef})
    --partitioning TYPE [none|msdos|gpt] Select partitioning type (${txtbld}${partitioning}${txtdef})
    --arch ARCH [i386|amd64]             Processor architecture of the image (${txtbld}${arch}${txtdef})
    --volume-type TYPE [instance|ebs]    Set the root volume type (${txtbld}${volume_type}${txtdef})
    --volume-size SIZE                   Default size of the root volume in GB (${txtbld}${volume_size}${txtdef})
    --volume-inodes SIZE                 Optionally set a custom inode count for
                                         ext2/3/4 volumes.
    --filesystem FS [ext2..4|xfs]        Filesystem of the root volume (${txtbld}${filesystem}${txtdef})
    --plugin FILE                        Path to plugin script.
                                         Can be specified more than once.

    --timezone ZONE                      Standard timezone (${txtbld}${timezone}${txtdef})
    --locale LOCALE                      Standard locale (${txtbld}${locale}${txtdef})
    --charmap CHARMAP                    Standard charmap (${txtbld}${charmap}${txtdef})

    --debootstrap-dir DIR                Debootstrap directory (${txtbld}${debootstrap_dir}${txtdef})
                                         The created volume will be mounted
                                         at <debootstrap_dir>/<volume_id>.

    --name-suffix SUFFIX                 AMI name suffix (${txtbld}${name_suffix}${txtdef})
    --description DESC                   Description of the AMI
    --apt-mirrors \"URL[ URL...]\"         APT mirror URLs, space-separated
                                         (${txtbld}${apt_mirrors}${txtdef})

${txtund}AWS credentials${txtdef}  (mandatory)
    --access-key ID                      AWS Access Key (${txtbld}\$AWS_ACCESS_KEY${txtdef})
    --secret-key KEY                     AWS Secret Key (${txtbld}\$AWS_SECRET_KEY${txtdef})

${txtund}instance-store requirements${txtdef}  (for when '--volume-type instance' is requested)
    --user ID                            Your 12-digit AWS user ID
    --cert CERT                          Path to your PEM-encoded certificate
    --private-key KEY                    Path to your PEM-encoded private key
    --s3-bucket BUCKET                   S3 path to upload the image to

${txtund}Other options${txtdef}
    --debug                              Print debugging information
    --help                               Prints this help message
"

# Run through the parameters and save them to variables.
while [ ${#} -gt 0 ]
do
    case ${1} in
        --template)         import_template ${2};          shift 2 ;;
        --codename)         codename=${2};                 shift 2 ;;
        --virt)             virt=${2};                     shift 2 ;;
        --arch)             arch=${2};                     shift 2 ;;
        --volume-type)      volume_type=${2};              shift 2 ;;
        --volume-size)      volume_size=${2};              shift 2 ;;
        --volume-inodes)    volume_inodes=${2};            shift 2 ;;
        --filesystem)       filesystem=${2};               shift 2 ;;
        --name-suffix)      name_suffix=${2};              shift 2 ;;
        --description)      description=${2};              shift 2 ;;
        --apt-mirrors)      apt_mirrors=${2};              shift 2 ;;
        --access-key)       AWS_ACCESS_KEY=${2};           shift 2 ;;
        --secret-key)       AWS_SECRET_KEY=${2};           shift 2 ;;
        --user)             EC2_USER_ID=${2};              shift 2 ;;
        --cert)             EC2_CERT=${2};                 shift 2 ;;
        --private-key)      EC2_PRIVATE_KEY=${2};          shift 2 ;;
        --s3-bucket)        S3_BUCKET=${2};                shift 2 ;;
        --timezone)         timezone=${2};                 shift 2 ;;
        --locale)           locale=${2};                   shift 2 ;;
        --charmap)          charmap=${2};                  shift 2 ;;
        --debootstrap-dir)  debootstrap_dir=${2};          shift 2 ;;
        --plugin)           plugins+=("${2}");             shift 2 ;;
        --debug)            set -x;                        shift   ;;
        -h|--help)          printf -- "$help";             exit 0  ;;
        *)
            die "Unrecognized option: ${1}" \
                "Type '${0} --help' to see a list of possible options"; ;;
    esac
done

# Required and default parameters
check_args AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_DEFAULT_REGION
export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_DEFAULT_REGION

# euca2ools uses a slightly different environment variable name.
export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID} \
       AWS_SECRET_KEY=${AWS_SECRET_ACCESS_KEY} \
       EC2_REGION=${AWS_DEFAULT_REGION}

if [ "${virt}" != "hvm" ] && [ ${ena_support} -eq 1 ]
then
    die "ENA requires the HVM image type."
fi

if [ "${volume_type}" = 'instance' ]
then
    check_args EC2_USER_ID S3_BUCKET
    test_files EC2_PRIVATE_KEY EC2_CERT
    export EC2_USER_ID S3_BUCKET EC2_PRIVATE_KEY EC2_CERT

    if [ -z "${EC2_URL}" ]
    then
        EC2_URL="http://${EC2_REGION}.ec2.amazonaws.com"
    fi
    export EC2_URL

    check_bucket_lock "${S3_BUCKET}"
fi

check_partitioning "${partitioning}" "${virt}" "${volume_type}"

# Specify points in the bootstrapping process, which the plugins can latch onto.
# This way plugins don't need fixing if we rename files.
TASK_PACKAGES="01-packages"
TASK_DBUS_PACKAGE="01-dbus"
TASK_CREATE_VOLUME="10-create-volume"
TASK_MOUNT_VOLUME="13-mount-volume"
TASK_MOUNT_SPECIALS="15-mount-specials"
TASK_BOOTSTRAP="14-bootstrap"
TASK_APT_SOURCES="21-apt-sources"
TASK_APT_UPGRADE="22-apt-dist-upgrade"
TASK_INITSCRIPTS="51-init-scripts"
TASK_CLOUD_INIT="52-cloud-init"
TASK_UNMOUNT_SPECIALS="71-unmount-specials"
TASK_UNMOUNT_VOLUME="72-unmount-volume"
TASK_SNAPSHOT="80-ebs-snapshot"
TASK_DELETE_VOLUME="82-delete-volume"
TASK_CREATE_AMI="95-register-ami"
